#pragma once

#ifndef _GEAR_CORE_FMT_H_
#define _GEAR_CORE_FMT_H_

#include<cstdint>

#include<dxgiformat.h>

/// <summary>
/// channel order + per channel bits + type
/// </summary>
namespace Gear
{
	namespace Core
	{
		namespace FMT
		{
			//Int
			constexpr DXGI_FORMAT R8I = DXGI_FORMAT_R8_SINT;
			constexpr DXGI_FORMAT RG8I = DXGI_FORMAT_R8G8_SINT;
			constexpr DXGI_FORMAT RGBA8I = DXGI_FORMAT_R8G8B8A8_SINT;

			constexpr DXGI_FORMAT R16I = DXGI_FORMAT_R16_SINT;
			constexpr DXGI_FORMAT RG16I = DXGI_FORMAT_R16G16_SINT;
			constexpr DXGI_FORMAT RGBA16I = DXGI_FORMAT_R16G16B16A16_SINT;

			constexpr DXGI_FORMAT R32I = DXGI_FORMAT_R32_SINT;
			constexpr DXGI_FORMAT RG32I = DXGI_FORMAT_R32G32_SINT;
			constexpr DXGI_FORMAT RGB32I = DXGI_FORMAT_R32G32B32_SINT;
			constexpr DXGI_FORMAT RGBA32I = DXGI_FORMAT_R32G32B32A32_SINT;

			//Uint
			constexpr DXGI_FORMAT R8UI = DXGI_FORMAT_R8_UINT;
			constexpr DXGI_FORMAT RG8UI = DXGI_FORMAT_R8G8_UINT;
			constexpr DXGI_FORMAT RGBA8UI = DXGI_FORMAT_R8G8B8A8_UINT;

			constexpr DXGI_FORMAT R16UI = DXGI_FORMAT_R16_UINT;
			constexpr DXGI_FORMAT RG16UI = DXGI_FORMAT_R16G16_UINT;
			constexpr DXGI_FORMAT RGBA16UI = DXGI_FORMAT_R16G16B16A16_UINT;

			constexpr DXGI_FORMAT R32UI = DXGI_FORMAT_R32_UINT;
			constexpr DXGI_FORMAT RG32UI = DXGI_FORMAT_R32G32_UINT;
			constexpr DXGI_FORMAT RGB32UI = DXGI_FORMAT_R32G32B32_UINT;
			constexpr DXGI_FORMAT RGBA32UI = DXGI_FORMAT_R32G32B32A32_UINT;

			//Unorm
			constexpr DXGI_FORMAT R8UN = DXGI_FORMAT_R8_UNORM;
			constexpr DXGI_FORMAT RG8UN = DXGI_FORMAT_R8G8_UNORM;
			constexpr DXGI_FORMAT RGBA8UN = DXGI_FORMAT_R8G8B8A8_UNORM;

			constexpr DXGI_FORMAT BGRA8UN = DXGI_FORMAT_B8G8R8A8_UNORM;

			constexpr DXGI_FORMAT R16UN = DXGI_FORMAT_R16_UNORM;
			constexpr DXGI_FORMAT RG16UN = DXGI_FORMAT_R16G16_UNORM;
			constexpr DXGI_FORMAT RGBA16UN = DXGI_FORMAT_R16G16B16A16_UNORM;

			//Snorm
			constexpr DXGI_FORMAT R8SN = DXGI_FORMAT_R8_SNORM;
			constexpr DXGI_FORMAT RG8SN = DXGI_FORMAT_R8G8_SNORM;
			constexpr DXGI_FORMAT RGBA8SN = DXGI_FORMAT_R8G8B8A8_SNORM;

			constexpr DXGI_FORMAT R16SN = DXGI_FORMAT_R16_SNORM;
			constexpr DXGI_FORMAT RG16SN = DXGI_FORMAT_R16G16_SNORM;
			constexpr DXGI_FORMAT RGBA16SN = DXGI_FORMAT_R16G16B16A16_SNORM;

			//Float
			constexpr DXGI_FORMAT R16F = DXGI_FORMAT_R16_FLOAT;
			constexpr DXGI_FORMAT RG16F = DXGI_FORMAT_R16G16_FLOAT;
			constexpr DXGI_FORMAT RGBA16F = DXGI_FORMAT_R16G16B16A16_FLOAT;

			constexpr DXGI_FORMAT R32F = DXGI_FORMAT_R32_FLOAT;
			constexpr DXGI_FORMAT RG32F = DXGI_FORMAT_R32G32_FLOAT;
			constexpr DXGI_FORMAT RGB32F = DXGI_FORMAT_R32G32B32_FLOAT;
			constexpr DXGI_FORMAT RGBA32F = DXGI_FORMAT_R32G32B32A32_FLOAT;

			constexpr DXGI_FORMAT RG11B10F = DXGI_FORMAT_R11G11B10_FLOAT;

			//Type Less
			constexpr DXGI_FORMAT R8TL = DXGI_FORMAT_R8_TYPELESS;
			constexpr DXGI_FORMAT RG8TL = DXGI_FORMAT_R8G8_TYPELESS;
			constexpr DXGI_FORMAT RGBA8TL = DXGI_FORMAT_R8G8B8A8_TYPELESS;

			constexpr DXGI_FORMAT R16TL = DXGI_FORMAT_R16_TYPELESS;
			constexpr DXGI_FORMAT RG16TL = DXGI_FORMAT_R16G16_TYPELESS;
			constexpr DXGI_FORMAT RGBA16TL = DXGI_FORMAT_R16G16B16A16_TYPELESS;

			constexpr DXGI_FORMAT R32TL = DXGI_FORMAT_R32_TYPELESS;
			constexpr DXGI_FORMAT RG32TL = DXGI_FORMAT_R32G32_TYPELESS;
			constexpr DXGI_FORMAT RGB32TL = DXGI_FORMAT_R32G32B32_TYPELESS;
			constexpr DXGI_FORMAT RGBA32TL = DXGI_FORMAT_R32G32B32A32_TYPELESS;

			//Depth
			constexpr DXGI_FORMAT D16UN = DXGI_FORMAT_D16_UNORM;
			constexpr DXGI_FORMAT D32F = DXGI_FORMAT_D32_FLOAT;

			//Unknown
			constexpr DXGI_FORMAT UNKNOWN = DXGI_FORMAT_UNKNOWN;

			uint32_t getByteSize(const DXGI_FORMAT format);

		}
	}
}

#endif // !_GEAR_CORE_FMT_H_
